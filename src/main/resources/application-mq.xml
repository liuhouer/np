<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/rabbit
    http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">

	<description>rabbitmq 连接服务配置</description>
	
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:config.properties" />
	

	 <!-- 定义连接工厂,用于创建连接等 -->
     <rabbit:connection-factory id="connectionFactory"
        host="${mq.host}" 
        port="${mq.port}" 
        username="${mq.username}"
        password="${mq.password}"  />
        
    <!-- 定义消息管理员 -->
    <rabbit:admin connection-factory="connectionFactory"/>
    
    <!-- 生产者需要以下 -->
    <!-- 定义交换机 -->
    <rabbit:topic-exchange name="mailchange" durable="true" >
        <!-- 如果是2个不同的系统进行通知，那就手动在管理后台进行绑定 -->
        <rabbit:bindings>
            <!-- <rabbit:binding queue="rest-sms-queue" pattern="rest.sms.#"/>
            <rabbit:binding queue="rest-jpush-queue" pattern="rest.jpush.#"/>
            <rabbit:binding queue="rest-sysmsg-queue" pattern="rest.sysmsg.#"/> -->
            <rabbit:binding queue="mail" pattern="mail.#"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
    
    <!-- 定义rabbitTemplate -->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory" exchange="mailchange"/>
    
    
    
    <!-- 消费者需要以下 -->
    <!-- 定义队列 -->
   <!--  <rabbit:queue name="rest-sms-queue" durable="true" auto-declare="true"/>
    <rabbit:queue name="rest-jpush-queue" durable="true" auto-declare="true"/>
    <rabbit:queue name="rest-sysmsg-queue" durable="true" auto-declare="true"/> -->
    
   <rabbit:queue name="mail" durable="true" /> 
    
    <!-- 消费者 -->
    <!--  <bean id="smsHandler" class="com.dingli.components.mq.handler.SmsHandler"></bean>  -->
    
    <bean id="mailHandler" class="cn.northpark.message.MailListener"></bean> 
    
    <!-- 队列监听 -->
    <!-- TODO 注释了后台不会滚动显示  这里需要注意acknowledge，这个属性默认是auto，如果消费者报错了，会一直报错，因为他是轮询监听的，可以修改为none或者manul -->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="none" >
        <rabbit:listener ref="mailHandler" method="onMessage" queue-names="mail" />
    </rabbit:listener-container> 

	
</beans>
